services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - social-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - social-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - social-net

  postgres-users:
    image: postgres:15-alpine
    container_name: postgres-users-db
    environment:
      POSTGRES_USER: useradmin
      POSTGRES_PASSWORD: usersecret
      POSTGRES_DB: userdb
    volumes:
      - pgdata_users:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U useradmin -d userdb"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - social-net

  migrate-users:
    image: migrate/migrate:v4.17.1
    container_name: migrate-users
    command: ["-path", "/migrations", "-database", "postgres://useradmin:usersecret@postgres-users:5432/userdb?sslmode=disable", "up"]
    volumes:
      - ./services/user-service/migrations:/migrations
    depends_on:
      postgres-users:
        condition: service_healthy
    networks:
      - social-net
    restart: on-failure

  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: user-service
    environment:
      DB_DSN: postgres://useradmin:usersecret@postgres-users:5432/userdb?sslmode=disable
      JWT_PRIVATE_KEY: /app/certs/id_rsa
      JWT_PUBLIC_KEY: /app/certs/id_rsa.pub
      SERVICE_PORT: 8081
      KAFKA_BROKER_URL: kafka:9092
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      migrate-users:
         condition: service_completed_successfully
    networks:
      - social-net
    restart: unless-stopped

  postgres-posts:
    image: postgres:15-alpine
    container_name: postgres-posts-db
    environment:
      POSTGRES_USER: postadmin
      POSTGRES_PASSWORD: postsecret
      POSTGRES_DB: postdb
    volumes:
      - pgdata_posts:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postadmin -d postdb"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - social-net

  migrate-posts:
    image: migrate/migrate:v4.17.1
    container_name: migrate-posts
    command: ["-path", "/migrations", "-database", "postgres://postadmin:postsecret@postgres-posts:5432/postdb?sslmode=disable", "up"]
    volumes:
      - ./services/post-service/migrations:/migrations
    depends_on:
       postgres-posts:
         condition: service_healthy
    networks:
      - social-net
    restart: on-failure

  post-service:
    build:
      context: .
      dockerfile: ./services/post-service/Dockerfile
    container_name: post-service
    environment:
      DB_DSN: postgres://postadmin:postsecret@postgres-posts:5432/postdb?sslmode=disable
      GRPC_PORT: 50051
      KAFKA_BROKER_URL: kafka:9092
    depends_on:
       migrate-posts:
          condition: service_completed_successfully
    networks:
      - social-net
    restart: unless-stopped

  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      USER_SERVICE_URL: http://user-service:8081
      POST_SERVICE_GRPC_URL: post-service:50051
      PORT: 8080
      JWT_PUBLIC_KEY: /app/certs/id_rsa.pub
      KAFKA_BROKER_URL: kafka:9092
    volumes:
      - ./certs/id_rsa.pub:/app/certs/id_rsa.pub:ro
    depends_on:
      - user-service
      - post-service
    networks:
      - social-net
    restart: unless-stopped

  test:
    build:
      context: ./tests
      dockerfile: Dockerfile
    container_name: social_network_test
    environment:
      API_GATEWAY_URL: "http://api-gateway:8080"
    volumes:
      - ./certs/id_rsa.pub:/app/certs/id_rsa.pub:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - api-gateway
    networks:
      - social-net
    command: ["pytest", "--maxfail=1", "--disable-warnings", "-q"]
    restart: "no"

volumes:
  pgdata_users:
  pgdata_posts:

networks:
  social-net:
    driver: bridge
