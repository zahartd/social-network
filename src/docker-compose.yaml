services:
  postgres-users:
    image: postgres:15-alpine # Используйте конкретную версию
    container_name: postgres-users-db
    environment:
      POSTGRES_USER: useradmin
      POSTGRES_PASSWORD: usersecret
      POSTGRES_DB: userdb
    volumes:
      - pgdata_users:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U useradmin -d userdb"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - social-net

  migrate-users:
    image: migrate/migrate:v4.17.1 # Используйте конкретную версию
    container_name: migrate-users
    command: ["-path", "/migrations", "-database", "postgres://useradmin:usersecret@postgres-users:5432/userdb?sslmode=disable", "up"]
    volumes:
      - ./services/user-service/migrations:/migrations
    depends_on:
      postgres-users:
        condition: service_healthy # Ждем пока БД будет готова
    networks:
      - social-net
    restart: on-failure

  user-service:
    build:
      context: ./services/user-service
    container_name: user-service
    environment:
      DB_DSN: postgres://useradmin:usersecret@postgres-users:5432/userdb?sslmode=disable
      JWT_PRIVATE_KEY: /app/certs/id_rsa
      JWT_PUBLIC_KEY: /app/certs/id_rsa.pub
      SERVICE_PORT: 8081
    volumes:
      - ./certs:/app/certs:ro # Чтение ключей
    depends_on:
      migrate-users:
         condition: service_completed_successfully # Ждем завершения миграций
    networks:
      - social-net
    restart: unless-stopped

  postgres-posts:
    image: postgres:15-alpine
    container_name: postgres-posts-db
    environment:
      POSTGRES_USER: postadmin
      POSTGRES_PASSWORD: postsecret
      POSTGRES_DB: postdb
    volumes:
      - pgdata_posts:/var/lib/postgresql/data
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postadmin -d postdb"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - social-net

  migrate-posts:
    image: migrate/migrate:v4.17.1
    container_name: migrate-posts
    command: ["-path", "/migrations", "-database", "postgres://postadmin:postsecret@postgres-posts:5432/postdb?sslmode=disable", "up"]
    volumes:
      - ./services/post-service/migrations:/migrations
    depends_on:
       postgres-posts:
         condition: service_healthy
    networks:
      - social-net
    restart: on-failure

  post-service:
    build:
      context: ./services/post-service
    container_name: post-service
    environment:
      DB_DSN: postgres://postadmin:postsecret@postgres-posts:5432/postdb?sslmode=disable
      GRPC_PORT: 50051 # Порт, на котором слушает gRPC сервер
    depends_on:
       migrate-posts:
          condition: service_completed_successfully
    networks:
      - social-net
    restart: unless-stopped

  api-gateway:
    build:
      context: ./services/api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080" # Публикуем порт API Gateway
    environment:
      # USER_SERVICE_URL должен указывать на имя сервиса и его порт ВНУТРИ Docker сети
      USER_SERVICE_URL: http://user-service:8081 # Убедитесь, что user-service слушает на 8081
      POST_SERVICE_GRPC_URL: post-service:50051 # Указываем на имя gRPC сервиса и его порт
      PORT: 8080
      JWT_PUBLIC_KEY: /app/certs/id_rsa.pub
    volumes:
      # Монтируем только публичный ключ для Gateway
      - ./certs/id_rsa.pub:/app/certs/id_rsa.pub:ro
    depends_on:
      - user-service
      - post-service # Gateway зависит от обоих бэкенд сервисов
    networks:
      - social-net
    restart: unless-stopped

volumes:
  pgdata_users:
  pgdata_posts:

networks:
  social-net:
    driver: bridge
